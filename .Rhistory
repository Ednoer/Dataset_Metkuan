library(Hmisc)
library(psych)
library(car)
setwd("D:/Dataset_metkuan/Automobile")
# Read the Automobile.csv data set and eliminate missing values
auto <- read.csv(file = "automobile.csv", header=TRUE, na.strings="?")
summary(auto)
auto$Price <- as.numeric(impute(auto$Price, mean))
auto$Normalized.losses <- as.numeric(impute(auto$Normalized.losses, mean))
auto$Num.of.doors <- as.numeric(impute(auto$Num.of.doors, median))
auto$Horsepower <- as.numeric(impute(auto$Horsepower, mean))
auto$Peak.rpm <- as.numeric(impute(auto$Peak.rpm, mean))
auto$Bore <- as.numeric(impute(auto$Bore, mean))
auto$Stroke <- as.numeric(impute(auto$Stroke, mean))
library(Hmisc)
library(psych)
library(car)
auto <- read.csv(file = "automobile.csv", header=TRUE, na.strings="?")
View(auto)
summary(auto)
auto$Price <- as.numeric(impute(auto$Price, mean))
auto$price <- as.numeric(impute(auto$price, mean))
auto$normalized.losses <- as.numeric(impute(auto$normalized.losses, mean))
auto$num.of.doors <- as.numeric(impute(auto$num.of.doors, median))
auto$horsepower <- as.numeric(impute(auto$horsepower, mean))
auto$peak.rpm <- as.numeric(impute(auto$peak.rpm, mean))
auto$bore <- as.numeric(impute(auto$bore, mean))
auto$stroke <- as.numeric(impute(auto$stroke, mean))
summary(auto)
auto.sel <- subset(auto, select = c(horsepower, city.mpg, peak.rpm, curb.weight, num.of.doors, price))
pairs.panels(auto.sel, col="red")
set.seed(2017)
train.size <- 0.8
train.index <- sample.int(length(auto.sel$price), round(length(auto.sel$price) * train.size))
train.sample <- auto.sel[train.index,]
valid.sample <- auto.sel[-train.index,]
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
summary(fit) # R2=73%
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight, data=train.sample)
summary(fit) # R2=73%
fit <- lm(price ~ horsepower+city.mpg+curb.weight, data=train.sample)
summary(fit) # R2=73%
fit <- lm(price ~ horsepower+curb.weight, data=train.sample)
summary(fit) # R2=72.7%
plot(fit)
plot(fit)
plot(fit)
train.sample[which(rownames(train.sample) %in% c("167", "44", "91")),]
train.sample$Pred.price <- predict(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
valid.sample$Pred.price <- predict(fit,
newdata = subset(valid.sample, select=c(price, horsepower, curb.weight)))
summary(fit)
eck how good is the model on the training set - correlation^2, RME and MAE
train.corr <- round(cor(train.sample$Pred.Price, train.sample$price), 2)
# Check how good is the model on the training set - correlation^2, RME and MAE
train.corr <- round(cor(train.sample$Pred.Price, train.sample$price), 2)
# Check how good is the model on the training set - correlation^2, RME and MAE
train.corr <- round(cor(train.sample$Pred.price, train.sample$price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.price - train.sample$price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.price - train.sample$price)))
c(train.corr^2, train.RMSE, train.MAE)
valid.corr <- round(cor(valid.sample$Pred.price, valid.sample$price), 2)
valid.RMSE <- round(sqrt(mean((valid.sample$Pred.price - valid.sample$price)^2)))
valid.MAE <- round(mean(abs(valid.sample$Pred.price - valid.sample$price)))
c(valid.corr^2, valid.RMSE, valid.MAE)
vif(auto.sel)
vif(auto)
vif(train.sample)
model <- glm(income ~ ., data = train.sample, family = "binomial") #full model is the model just fitted
model <- glm(price ~ ., data = train.sample, family = "binomial") #full model is the model just fitted
model <- glm(price ~ ., data = train.sample) #full model is the model just fitted
summary(model)
vif(train.sample)
summary(fit)
vif(fit)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
summary(fit) # R2=73%
vif(fit)
ncvTest(fit)
spreadLevelPlot(fit)
library(lmtest)
dwtest(fit)
res <- residuals(fit)
plot(res, ylab="Resdiuals", xlab="observation order", main="plot Residuals vs observation order", col="blue", pch=16, cex=1.3)
abline(0,0)
#1.Mengaktifkan librari
library(Hmisc)
library(psych)
library(car)
# menset direktori
setwd("D:/dataset_metkuan/automobile")
setwd("D:/Dataset_metkuan/Automobile")
#1.Mengaktifkan librari
library(Hmisc)
library(psych)
library(car)
# menset direktori
setwd("D:/dataset_metkuan/automobile")
# Membaca data set Automobile.csv
auto <- read.csv(file = "automobile.csv", header=TRUE, na.strings="?")
summary(auto)
View(auto)
summary(auto)
#mengeliminasi missing values
auto$price <- as.numeric(impute(auto$price, mean))
auto$normalized.losses <- as.numeric(impute(auto$normalized.losses, mean))
auto$num.of.doors <- as.numeric(impute(auto$num.of.doors, median))
auto$horsepower <- as.numeric(impute(auto$horsepower, mean))
auto$peak.rpm <- as.numeric(impute(auto$peak.rpm, mean))
auto$bore <- as.numeric(impute(auto$bore, mean))
auto$stroke <- as.numeric(impute(auto$stroke, mean))
summary(auto)
summary(auto)
summary(auto)
# Untuk pemdodelan regresi kita melakukan subset beberapa variable numerik (terbaik)
auto.sel <- subset(auto, select = c(horsepower, city.mpg, peak.rpm, curb.weight, num.of.doors, price))
View(auto.sel)
data(auto.sel)
pairs.panels(auto.sel, col="red")
set.seed(2017)
train.size <- 0.8
train.index <- sample.int(length(auto.sel$price), round(length(auto.sel$price) * train.size))
train.sample <- auto.sel[train.index,]
valid.sample <- auto.sel[-train.index,]
library(Hmisc)
library(psych)
library(car)
# Untuk pemdodelan regresi saya melakukan subset beberapa variable numerik (terbaik)
auto.sel <- subset(auto, select = c(horsepower, city.mpg, peak.rpm, curb.weight, num.of.doors, price))
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
vif(model)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
vif(fit)
summary(fit)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+city.mpg+curb.weight, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+curb.weight, data=train.sample)
summary(fit)
plot(fit)
#3. melihat informasi kesalahan secara visual
plot(fit)
#analisis -> cek Multicolinearity
vif(fit)
library(Hmisc)
library(psych)
library(car)
#analisis -> cek Heteroscedasticity
ncvTest(fit)
spreadLevelPlot(fit)
#analisis -> cek Autocorrelation (Durbin-Watson Test)
library(lmtest)
dwtest(fit)
#analisis -> cek Autocorrelation (Durbin-Watson Test)
library(lmtest)
dwtest(fit)
res <- residuals(fit)
plot(res, ylab="Resdiuals", xlab="observation order", main="plot Residuals vs observation order", col="blue", pch=16, cex=1.3)
abline(0,0)
library(Hmisc)
library(psych)
library(car)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
summary(fit)
library("car", lib.loc="~/R/win-library/3.4")
library(Hmisc)
library(psych)
library(car)
#analisis -> cek Multicolinearity
vif(fit)
#analisis -> cek Heteroscedasticity
ncvTest(fit)
spreadLevelPlot(fit)
#analisis -> cek Autocorrelation (Durbin-Watson Test)
library(lmtest)
dwtest(fit)
res <- residuals(fit)
plot(res, ylab="Resdiuals", xlab="observation order", main="plot Residuals vs observation order", col="blue", pch=16, cex=1.3)
abline(0,0)
#analisis -> cek Autocorrelation (Durbin-Watson Test)
library(lmtest)
dwtest(fit)
res <- residuals(fit)
plot(res, ylab="Resdiuals", xlab="observation order", main="plot Residuals vs observation order", col="blue", pch=16, cex=1.3)
abline(0,0)
plot(fit)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight, data=train.sample)
summary(fit)
plot(fit)
vif(fit)
#analisis -> cek Heteroscedasticity
ncvTest(fit)
spreadLevelPlot(fit)
#analisis -> cek Autocorrelation (Durbin-Watson Test)
library(lmtest)
dwtest(fit)
res <- residuals(fit)
plot(res, ylab="Resdiuals", xlab="observation order", main="plot Residuals vs observation order", col="blue", pch=16, cex=1.3)
abline(0,0)
fit <- lm(price ~ horsepower+city.mpg+curb.weight, data=train.sample)
summary(fit)
plot(fit)
plot(fit)
#analisis -> cek Multicolinearity
vif(fit)
#analisis -> cek Heteroscedasticity
ncvTest(fit)
spreadLevelPlot(fit)
#analisis -> cek Autocorrelation (Durbin-Watson Test)
library(lmtest)
dwtest(fit)
res <- residuals(fit)
plot(res, ylab="Resdiuals", xlab="observation order", main="plot Residuals vs observation order", col="blue", pch=16, cex=1.3)
abline(0,0)
View(train.sample)
View(auto)
train.sample[which(rownames(train.sample) %in% c("167", "44", "91")),]
View(train.sample)
View(train.sample)
train.sample$Pred.price <- yay(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
# menentukan nilai prediksi dari train.sample dan valid.sample ()
train.sample$Pred.price <- predict(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
valid.sample$Pred.price <- predict(fit,
newdata = subset(valid.sample, select=c(price, horsepower, curb.weight)))
library(Hmisc)
library(psych)
library(car)
# menentukan nilai prediksi dari train.sample dan valid.sample
train.sample$Pred.price <- predict(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
valid.sample$Pred.price <- predict(fit,
newdata = subset(valid.sample, select=c(price, horsepower, curb.weight)))
auto$price <- as.numeric(impute(auto$price, mean))
auto$normalized.losses <- as.numeric(impute(auto$normalized.losses, mean))
auto$num.of.doors <- as.numeric(impute(auto$num.of.doors, median))
auto$horsepower <- as.numeric(impute(auto$horsepower, mean))
auto$peak.rpm <- as.numeric(impute(auto$peak.rpm, mean))
auto$bore <- as.numeric(impute(auto$bore, mean))
auto$stroke <- as.numeric(impute(auto$stroke, mean))
summary(auto)
auto.sel <- subset(auto, select = c(horsepower, city.mpg, peak.rpm, curb.weight, num.of.doors, price))
pairs.panels(auto.sel, col="red")
pairs.panels(auto.sel, col="red")
set.seed(2017)
train.size <- 0.8
train.index <- sample.int(length(auto.sel$price), round(length(auto.sel$price) * train.size))
train.sample <- auto.sel[train.index,]
valid.sample <- auto.sel[-train.index,]
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+city.mpg+curb.weight, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+curb.weight, data=train.sample)
summary(fit)
plot(fit)
train.sample$Pred.price <- predict(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
valid.sample$Pred.price <- predict(fit,
newdata = subset(valid.sample, select=c(price, horsepower, curb.weight)))
summary(fit)
train.sample$Pred.price <- predict(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
valid.sample$Pred.price <- predict(fit,
newdata = subset(valid.sample, select=c(price, horsepower, curb.weight)))
summary(fit)
summary(fit)
library(Hmisc)
library(psych)
library(car)
train.corr <- round(cor(train.sample$Pred.price, train.sample$price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.price - train.sample$price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.price - train.sample$price)))
c(train.corr^2, train.RMSE, train.MAE)
valid.corr <- round(cor(valid.sample$Pred.price, valid.sample$price), 2)
valid.RMSE <- round(sqrt(mean((valid.sample$Pred.price - valid.sample$price)^2)))
valid.MAE <- round(mean(abs(valid.sample$Pred.price - valid.sample$price)))
c(valid.corr^2, valid.RMSE, valid.MAE)
# cek seberapa baik model di train
train.corr <- round(cor(train.sample$Pred.price, train.sample$price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.price - train.sample$price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.price - train.sample$price)))
c(train.RMSE, train.MAE)
train.corr <- round(cor(train.sample$Pred.price, train.sample$price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.price - train.sample$price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.price - train.sample$price)))
c(train.corr^2, train.RMSE, train.MAE)
valid.RMSE <- round(sqrt(mean((valid.sample$Pred.price - valid.sample$price)^2)))
valid.MAE <- round(mean(abs(valid.sample$Pred.price - valid.sample$price)))
c(valid.RMSE, valid.MAE)
train.corr <- round(cor(train.sample$Pred.price, train.sample$price), 2)
c(train.corr)
c(train.corr^2)
valid.corr <- round(cor(valid.sample$Pred.price, valid.sample$price), 2)
c(valid.corr^2)
# memeriksa kesalahan secara visual
pairs.panels(auto.sel, col="red")
library(Hmisc)
library(psych)
library(car)
# memeriksa kesalahan secara visual
pairs.panels(auto.sel, col="red")
# memeriksa kesalahan secara visual
pairs.panels(auto.sel, col="red")
